// ============================================================================
// Main
// ============================================================================


// Global Variables -----------------------------------------------------------
var copyButton = document.getElementById( 'button-copy' );

var mailtoLinks = document.querySelectorAll( '[data-message-subject]' );

var sectionMain = document.getElementById( 'section-main' );


// Global Functions -----------------------------------------------------------
/**
 * Takes a string and reverses it (ex: "foobar" becomes "raboof").
 *
 * @example reverseString(string)
 * @param {String} string String to be reversed.
 * @see printContactInfo
 * @public
 */
var reverseString = function(string) {
  return string.split( "" ).reverse().join( "" );
}




// ============================================================================
// Open Dialog
// ============================================================================


// Turns mailto links into buttons for use with a11y-dialog
for ( var i = 0; i < mailtoLinks.length; i++ ) {
  var contactButton = mailtoLinks[i]; // Turns querySelectorAll results into something workable
  var contactButtonClasses = contactButton.getAttribute( 'class' );
  var contactButtonSubject = contactButton.getAttribute( 'data-message-subject' );
  var contactButtonContent = contactButton.innerHTML;

  contactButton.outerHTML = '<button class="' + contactButtonClasses + ' is-contact-button' + '" data-message-subject="' + contactButtonSubject + '">' + contactButtonContent + '</button>'
}


// Create a new A11yDialog by targeting #a11y-dialog, second argument
// specifies the `<main>` element's ID. See:
// https://github.com/edenspiekermann/a11y-dialog#javascript
var dialog = new A11yDialog( document.getElementById( 'a11y-dialog' ), sectionMain );


/**
 * Takes the `contactInfo` object and turns it into an email address. Used to help mitigate spam.
 *
 * @example printContactInfo()
 * @return {String} String containing the deobfuscated email address.
 * @see handleDialogueButtonClick
 * @see reverseString
 * @public
 */
var printContactInfo = function() {
  var contactInfo = {
    first:   "cire",
    middle:  "w",
    last:    "yeliab",
    service: "liamg"
  };

  return reverseString(contactInfo.first) + "." + reverseString(contactInfo.middle) + "." + reverseString(contactInfo.last) + "@" + reverseString(contactInfo.service) + ".com";
}


/**
 * Propagates the email address into an inpupt field and provider contact links, provides the relevant subject, then displays the A11yDialog when a click event listener is fired.
 *
 * @example handleDialogueButtonClick()
 * @return {String} String containing the deobfuscated email address.
 * @see printContactInfo
 * @public
 */
function handleDialogueButtonClick( e ) {
  var input = document.getElementById( 'input-email' );
  input.setAttribute( 'value', printContactInfo() );

  [].slice.apply( document.querySelectorAll( '.c-services__link' ) ).forEach(function( elm ) {
    var href = elm.getAttribute( 'data-href' );

    href = href.replace( '%SUBJECT%', e.target.getAttribute('data-message-subject') );
    href = href.replace( '%CONTACT%', printContactInfo() );

    elm.setAttribute( 'href', href );
  });

  dialog.show();
}


// Hack that turns the trees generated by querySelectorAll targeting the
// `is-contact-button` class, turns it into an array, then adds an event listener
// that fires the handleDialogueButtonClick function.
[].slice.apply( document.querySelectorAll( '.is-contact-button' ) ).forEach(function( elm ) {
  elm.addEventListener( 'click', handleDialogueButtonClick );
});




// ============================================================================
// Copy Email
// ============================================================================


/**
 * Removes the success state from the button and restores the button content to its original state.
 *
 * @example resetCopyButton()
 * @public
 */
function resetCopyButton() {
  copyButton.classList.remove( 'is-successful' );
  copyButton.innerHTML = '<svg height="14" width="14" aria-hidden="true" viewBox="0 0 100 100" class="icon c-button__icon"><use xlink:href="#icon-clipboard"></use></svg>Copy<span class="content-hide-visually"> email address</span>';
}


var clipboard = new Clipboard( '.c-button__copy' );

// Adds a success state when the email address is successfully copied
clipboard.on('success', function( e ) {
  copyButton.classList.add( 'is-successful' );
  copyButton.setAttribute( 'aria-live', 'polite' );
  copyButton.innerHTML = '<svg height="14" width="14" aria-hidden="true" viewBox="0 0 100 100" class="icon c-button__icon"><use xlink:href="#icon-checkmark"></use></svg><span class="content-hide-visually">Email address </span>Copied';

  e.clearSelection();

  setTimeout( resetCopyButton, 2500 );
});


// Displays an error state if the email address does not successfully copy
clipboard.on('error', function( e ) {
  var contactField = document.getElementById( 'button-copy' );
  var contactError = document.createElement( 'p' );
  var contactFieldParent = contactField.parentNode;

  copyButton.disabled = true;

  contactFieldParent.insertBefore(contactError, contactField.nextSibling); // Generate the error message after the contact field
  contactError.innerHTML = 'Your browser does not have clipboard support. Try copying the email address manually.';
  contactError.setAttribute( 'class', 'c-button__error' );
  contactError.setAttribute( 'aria-live', 'polite' );
});
