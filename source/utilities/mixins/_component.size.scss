// ============================================================================
// Component
// Size
// ============================================================================


/// Specifies a component's height and width, and optionally a different top
/// margin, using the Lobotomized Owl selector.
///
/// @group Components
///
/// @parameter {Measurement} $height               - Sets the height of the component
/// @parameter {Measurement} $width      [inherit] - Sets the width of the component
/// @parameter {Measurement} $top-margin [null]    - Optionally sets the top margin using the Modular Scale function
///
/// @example scss
///  @include component-size(5rem, 50%, 3);


@mixin component-size(
    $height,
    $width: inherit,
    $top-margin: null
) {

    // Validate height
    @if type-of($height) != number {
        @error "`#{$height}`"
        + $meta-invalid-argument
        + $meta-invalid-argument-provide
        + "a valid number.";
    }

    @else if type-of($height) == number
    and unitless($height) {
        @error "`#{$height}`"
        + $meta-invalid-argument
        + $meta-invalid-argument-provide
        + "a valid CSS unit.";
    }

    @else {
      height: $height;
    }

    // Validate width
    @if type-of($width) != number {
        @error "`#{$width}`"
        + $meta-invalid-argument
        + $meta-invalid-argument-provide
        + "a valid number.";
    }

    @else if type-of($width) == number
    and unitless($width) {
        @error "`#{$width}`"
        + $meta-invalid-argument
        + $meta-invalid-argument-provide
        + "a valid CSS unit.";
    }

    @else {
      width: $width;
    }

    // Validate top margin, if present
    @if $top-margin != null
    and type-of($top-margin) == number
    and unitless($top-margin) {
        margin-top: ms($top-margin, rem);
    }

    @else {
        @error "`#{$top-margin}`"
        + $meta-invalid-argument
        + $meta-invalid-argument-provide
        + "a valid number.";
    }
}
